<MButton Class="async-btn rounded-2" Loading="_loading" OnClick="HandleOnClick" Disabled="@Disabled" Style="@($"{ReadonlyStyle} {Style}")" @attributes="Attributes">
    @ChildContent
</MButton>

@code {
    private bool _loading;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = default!;

    [Parameter]
    public string Style { get; set; } = default!;

    public string ReadonlyStyle => Readonly ? "pointer-events:none;" : "";

    private async Task HandleOnClick()
    {
        if (OnClick.HasDelegate)
        {
            _loading = true;

            await OnClick.InvokeAsync();

            _loading = false;
        }
    }
} 